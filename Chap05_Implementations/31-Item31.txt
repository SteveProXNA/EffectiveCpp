31 Item31
13-Dec-2013


Item 31: Minimize compilation dependencies between files.


Change C++ implementation file (private stuff) then rebuild seems the whole world is being recompiled + relinked

why?
Problem is C++ doesn't do very good job separating interfaces from implementations
Class definition specifies not only a class interface but also fair number of implementation details


e.g.
class Person
{
public:
	Person(const std::string& name, const Date& birthday, const Address& addr);

private:
	std::string theName;	// implementation detail
	Date theBirthDate;		// implementation detail
	Address theAddress;		// implementation detail
};


Here class Person cannot be compiled without access to definitions for classes Person implementation uses,
namely string, Date and Address

Such definitions are typically provided through #include directives, so you're likely to add to Person.h

#include <string>
#include "Address.h"
#include "Date.h"


Unfortunately this sets up compilation dependency between file defining Person and these header files

If any of these header files are changed (or any header files they depend on change) then file containing Person class
must be recompiled as must any of the files that use Person

Such cascading compilation dependencies have caused many projects untold grief!


Why C++ insists on putting implementation details of a class in the class definition
e.g. why can't you define Person class this way (separate implementation details separately?)


namespace std
{
     class string;             // forward declaration (an incorrect one — see below)
}


class Date;                    // forward declaration
class Address;                 // forward declaration


class Person
{
public:
      Person(const std::string& name, const Date& birthday, const Address& addr);
      std::string name() const;
      std::string birthDate() const;
      std::string address() const;
};


If that were possible then clients of Person would have to recompile only if the interface to the class changed


TWO PROBLEMS

01.
First string not a class but typedef for basic_string<char>
So forward declaration for string is incorrect

Proper forward declaration is substantially more complex because it involves additional templates
However you should not try to manually declare parts of the STL!

Instead use the proper #include and be done with it - if this is a bottleneck then you should be able to use PCH
PreCompiled Headers


02.
Second more significant difficulty with forward-declaring everything has to do with the need for compilers
to know the size of the objects during compilation

Consider:
int main()
{
	int x;			// define an int
	Person p(params);	// define a person
}


When compilers see definition for x they know they must allocate enough space for an int - no problem
Each compiler knows how big an int is

When compilers see definition for p they know they must allocate enough space for a Person
but how are they supposed to know how big a Person is?

The only way to get to that information is to consult the class definition but if it were legal for class
definitions to omit the implementation details then how would compilers know how much space to allocate?


In C# and Java, compilers allocate only enough space for a pointer to an object because they are reference types
i.e. they handle the above code as if it had been written like this:

int main()
{
	int x;			// define an int
	Person* p;		// define a pointer to a person
}


This is legal C++ so you can play the "hide the object implementation behind a pointer" game yourself
Separate Person into 2x classes: 1x offering only the interface and the other implementing that interface

Implementation class is named PersonImpl and Person would be defined like this:


#include <string>                      // standard library components
                                       // shouldn't be forward-declared
#include <memory>                      // for tr1::shared_ptr; see below


class PersonImpl;                      // forward decl of Person impl. class
class Date;                            // forward decls of classes used in
class Address;                         // Person interface


class Person
{
public:
 Person(const std::string& name, const Date& birthday, const Address& addr);        

 std::string name() const;
 std::string birthDate() const;
 std::string address() const;

private:                                   // ptr to implementation;
  std::tr1::shared_ptr<PersonImpl> pImpl;  // see Item 13 for info on std::tr1::shared_ptr
};


Here main class Person contains nothing but pointer data member (tr1::shared_ptr Item13) to its implementation class
PersonImpl - known as the "pimpl idiom" (pointer to implementation idiom... pointer often called pImpl (as above)

Person is divorced from details of date, address, person; implementations of those classes can be modified at will
but Person clients need not recompile

Also, clients unlikely to write code that depends on Person implementation because they're unable to see details
True separation of interface and implementation


KEY
Key to separation is replacement of dependencies on definitions with dependencies on declarations

Essence of minimizing compilation dependencies: make your header files self-sufficient when practical
and when not depend on declarations in other files, not definitions


Everything flows this simple design strategy:

01.
Avoid using objects when object references and pointers will do
Define references and pointers to a type with only declaration for type
Define objects of a type necessitates the presence of the type's definition


02.
Depend on class declarations instead of class definitions whenever you can
NB: you never need a class definition to declare a function using that class
not even if the function passes or returns the class type by value

e.g.
class Date;

// fine - no definition of Date is needed
Date today();
void clearAppointments(Date d);


Pass by value usually bad idea (Item20) but still no justification for introducing unnecessary compilation dependencies
Above may surprise but makes sense - if anybody calls today() or clearAppointments() those calls must have seen Date obj

By moving onus of providing class definitions from your header file of function declarations to clients' files
containing the actual calls then you eliminate artificial client dependencies on type definitions they don't need


03.
Provide separate header files for declarations and definitions
Header files need to come in pairs: 1x for declarations and 1x for definitions

These files must be kept consistent:
if a declaration is changed in one place then it must be changed in both

Library clients should always #include a declaration file instead of forward-declaring themselves
Library authors should provide both header files

e.g.
the Date client wishing to declare today() and clearAppointments() shouldn't manually forward-declare
Date as shown above - rather it should #include the appropriate header of declarations


// header file declaring (but not defining) class Date
#include "datefwd.h"

// as before
Date today();
void clearAppointments(Date d);


The name of the declarations-only header file "datefwd.h" is based on the header <iosfwd> from C++ STL (Item54)
<iosfwd> contains declarations of iostream components whose corresponding definitions are in several diff headers:
<sstream>
<sstreambuf>
<fstream>
<iostream>

<iosfwd> makes clear that this advice applies to non-templates also
Item30 explains in many build environments, template definitions are found only in header files
some build environments allow template definitions in non-header files

so makes sense to provide declaration-only headers for templates like <iosfwd>


C++ also offers export keyword but very early to see if export play role in effective C++ programming


HANDLE class
Classes like Person that employ pimpl idiom often called Handle classes
One way they behave is to forward all their function calls to corresponding implementation classes and
have those classes do the real work

e.g.
Person member functions


// we're implementing the Person class so we must #include its class definition
#include "Person.h"       


// we must also #include PersonImpl's class definition
// otherwise we couldn't call its member functions
#include "PersonImpl.h"      


Person::Person(const std::string& name, const Date& birthday, const Address& addr) :
	pImpl(new PersonImpl(name, birthday, addr))
{
}


std::string Person::name() const
{
	return pImpl->name();
}


Important
Person constructor calls PersonImpl constructor (by using new - Item16)
Person::name calls PersonImpl::name

Making Person a Handle class doesn't change what Person does, it just changes the way it does it


INTERFACE class
Alternative to Handle class is make Person special abstract base class called an Interface class
Purpose is to specify an interface for derived classes (Item34)

Typically has no data members, no constructors, a virtual destructor (Item7)
and a set of pure virtual functionsthat specify the interface


Unlike C# interface, which does not allow data members or function implementations in interfaces
C++ forbids neither of these things - greater flexibility can be useful

Item36 explains implementation of non-virtual functions should be the same for all classes in hierarchy
so makes sense to implement such functions as part of the Interface class that declares them


Interface for Person:
class Person
{
public:
  virtual ~Person();

  virtual std::string name() const = 0;
  virtual std::string birthDate() const = 0;
  virtual std::string address() const = 0;
};


Clients of this class must program in terms of Person pointers and references;
it's not possible to instantiate classes containing pure virtual functions

It is possible to instantiate classes derived from Person


Like clients of Handle classes, clients of Interface classes need not recompile unless the public interface is modified


Clients of an Interface class must have a way to create new objects - usually by calling function that plays the role
of the constructor for the derived classes that are actually instantiated

Such functions called factory function (Item13) or virtual constructors

They return pointers (pref. smart pointers - Item18) to dynamically allocated objects that support the class interface
Such functions often declared static inside the Interface class


IMPORANT:
I couldn't get this 100% working like code looked in the book 
as seemed to be a circular reference but I did what I could

class Person
{
public:
 static std::tr1::shared_ptr<Person>    // return a tr1::shared_ptr to a new

   create(const std::string& name,      // Person initialized with the

          const Date& birthday,         // given params; see Item 18 for

          const Address& addr);         // why a tr1::shared_ptr is returned

};


concrete implementation class
class RealPerson: public Person
{
public:
  RealPerson(const std::string& name, const Date& birthday,

             const Address& addr)

  : theName(name), theBirthDate(birthday), theAddress(addr)
  {}

  virtual ~RealPerson() {}

  std::string name() const;        // implementations of these 
  std::string birthDate() const;   // functions are not shown, but
  std::string address() const;     // they are easy to imagine

private:
  std::string theName;
  Date theBirthDate;
  Address theAddress;
};



std::tr1::shared_ptr<Person> Person::create(const std::string& name,
                                            const Date& birthday,
                                            const Address& addr)
{
  return std::tr1::shared_ptr<Person>(new RealPerson(name, birthday,addr));



But I wrote the factory function in the derived class RealPerson


class RealPerson3 : public Person3
{
public:
	RealPerson3() {}
	RealPerson3(const std::string& name, const Date& birthday, const Address& addr) :
		theName(name), theBirthDate(birthday), theAddress(addr)
	{
	}
	
	virtual ~RealPerson3() {}

	static std::tr1::shared_ptr<Person3> create(const std::string& name, const Date& birthday, const Address& addr)
	{
		return std::tr1::shared_ptr<Person3>(new RealPerson3(name, birthday, addr));
	}

	std::string name() const		{ return theName; }
	std::string birthDate() const	{ return "date"; }
	std::string address() const		{ return "addr"; }

private:
	std::string theName;
	Date theBirthDate;
	Address theAddress;
};


RealPerson demonstrates 2x most common mechanisms for implementing the Interface class:
it inherits its interface spec from the Interface class Person then implements functions in the interface

Another way to implement an Interface class involves multiple inheritance (Item40)


Handle classes and Interface classes decouple interfaces from implementations thereby reducing compilation dependencies

COSTS?

01.
Handle classes have to go thru implementation pointer to get to object data = 1x level of indirection per access
Add size of implementation pointer to amount of memory required to store each object

Finally, implementation pointer has to be initialized (in Handle class ctor)
to point to dynamically allocated implementation object = incur overhead in dynamic memory allocation (+ deallocation)

Possible encountering bad_alloc (out-of-memory) exception


02.
Interface classes - every function call is virtual = cost 1x indirect jump each time make function call (Item7)
Objects derived from Interface class must contain virtual table pointer (Item7)

Pointer may increase amount of memory needed to store an object, depends whether Interface class source of all
virtual functions for the object


Neither handle nor interface classes get any use out of inline functions (Item30)  Why?
Function bodies must typically be in header files in order to be inlined

But handle and interface classes are designed to hide implementation details like function bodies


SUMMARY
Don't dismiss handle + implementation classes because of costs associated with them 
You use virtual functions!!


Consider these techniques in an evolutionary manner:
Use handle classes and Interface classes during development to minimize the impact on clients when the impl's change

Then replace handle and Interface classes with concrete classes for Production use when can be shown that the
difference in speed and/or size is significant to justify the increased coupling between classes


REMEMBER
* General idea behind minimizing compilation dependencies is to depend on declarations instead of definitions
  Two approaches based on this idea are Handle classes and Interface classes

* Library header files should exist in full and declaration-only forms
  This applies regardless of whether templates are involved