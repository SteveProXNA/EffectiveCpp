class Shape
{
public:
	enum ShapeColor { Red, Green, Blue };

	// All shapes must offer a function to draw themselves.
	virtual void draw(ShapeColor color = Red) const = 0;
};


class Rectangle : public Shape
{
public:
	// Notice the different default parameter value = bad!
	virtual void draw(ShapeColor color = Green) const
	{
	}
};


class Circle : public Shape
{
public:
	virtual void draw(ShapeColor color) const
	{
	}
};


#include "Shape1.h"

int main()
{
	Shape* ps;					// static type = Shape*
	Shape* pr = new Rectangle;	// static type = Shape*		dynaminc type = Rectangle*
	Shape* pc = new Circle;		// static type = Shape*		dynaminc type = Circle*


	// ps dynamic type is now Circle*
	ps = pc;

	// ps dynamic type is now Rectangle*
	ps = pr;


	// Calls Circle::draw(Shape::Red);
	pc->draw(Shape::Red);

	// Calls Rectangle::draw(Shape::Red);
	pr->draw(Shape::Red);


	// Calls Rectangle::draw(Shape::Red);
	pr->draw();


	delete pc;
	delete pr;

	return 0;
}