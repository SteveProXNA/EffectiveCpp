#pragma once

class Top
{
};

class Middle : public Top
{
};

class Bottom : public Middle
{
};


#pragma once

template<typename T>
class SmartPtr
{
public:
	// member template for "generalized copy constructor"
	template<typename U>
	SmartPtr(const SmartPtr<U>& other) : heldPtr(other.get())
	{
	}

	T* get() const { return heldPtr; }

private:
	T* heldPtr;
};


#pragma once

#include "Files01.h"
#include "Files03.h"

int main()
{
	//error C2440: 'initializing' : cannot convert from 'SmartPtr<T>' to 'SmartPtr<T>'
	//SmartPtr<Top> pt1 = SmartPtr<Middle>(new Middle);
	//SmartPtr<Top> pt1 = SmartPtr<Bottom>(new Bottom);
	//SmartPtr<const Top> pct2 = pt1;
	return 0;
}