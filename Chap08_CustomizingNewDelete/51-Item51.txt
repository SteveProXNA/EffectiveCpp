51 Item51
28-Mar-2014


Item 51: Adhere to convention when writing new and delete


Item explains conventions must follow when you write your own versions of operator new and delete


Conformant operator new return right value, call new-handling function when insufficient memory available
and prepared to cope with requests for no memory

Also, avoid inadvertently hide "normal" form of new


RETURN value
Easy: supply requested memory and return pointer to it
Otherwise Item49 throw bad_alloc exception


However, operator new tries to allocate memory more than once, calling new-handling function after each failure
Assumption: new-handling function frees up some memory and try again

Only when pointer to new-handling function is null does operator new throw an exception


ZERO bytes
C++ requires operator new return legitimate pointer even when zero bytes are requested


void* operator new(std::size_t) throw(std::bad_alloc)
{
	using namespace std;

	if (0 == size)
	{
		size = 1;
	}

	while (true)
	{	
		if (allocation successful)
		{
			return (pointer to the memory);
		}

		// allocation unsuccessful
		// find out what current new-handling function is
		new_handler globalHandler = set_new_handler(0);
		set_new_handler(globalHandler);

		if (globalHandler)
		{
			(*globalHandler)();
		}
		else
		{
			throw std::bad_alloc();
		}
	}
}


Zero byte request => 1x byte weird but shouldn't be asked for zero bytes
Check new-handling function pointer set null must set new handler to find out what it is - a bit crude but works


while (true)
only way to exit loop is for memory to be successfully allocated or the new-handling function
do one of the things described in Item49:
* make more memory available
* install a different new-handler
* de-install the new-handler
* throw an exception bad_alloc
* fail to return


If new-handler doesn't do one of these things then operator new will never terminate


INHERITANCE
operator new functions are inherited by derived classes - lead to interesting complications

One common reason for writing custom memory manager is to optimize allocations for objects of a specific class
not for a class or any of its derived classes

i.e.
operator new for class X, the behavior of that function is typically tuned for objects of sizeof(X)
Because of inheritance, it is possible that the operator new in a base class will be called to allocate for derived


class Base
{
public:
	static void* operator new(std::size_t size) throw(std::bad_alloc);
};


class Derived : public Base
{
};


// calls Base::operator new!
Derived* p = new Derived


If Base class-specific operator new not designed to cope with this then the best way to handle situation 
is to slough off calls requesting the "wrong" amount of memory to the standard operator new

e.g.
void* Base::operator new(std::size_t size) throw(std::bad_alloc)
{
	if (size != sizeof(Base))
	{
		return ::operator new(size);
	}
}


Wait - what about test for zero?
It's been incorporated into the test of size against sizeof(Base)
C++ decrees that all freestanding objects have non-zero size (Item39)


By definition, sizeof(Base) can never be zero, so if size == 0 then the request will forwarded to ::operator new


ARRAYS
To control memory allocation for arrays on a per-class basis then you need to implement operator new array
specific "array new" operator new[]

Write operator new[] then remember that all you're doing is allocating a chunk of raw memory
you just can't do anything to the as-yet-nonexistent objects in the array.  Why?

First you don't know how big each object is
After all, base class operator new[] might, through inheritance, be called to allocate memory for an array of
derived class objects and derived class objects are usually bigger than base class objects


DELETE
All you need to remember is that C++ guarantees it's always safe to delete the null pointer
so you need to honor that guarantee

void operator delete(void* rawMemory) throw()
{
	if (0 == rawMemory)
	{
		return;
	}

	// deallocate the memory pointed to by rawMemory
}



The member version is simple except you must check the size of what's being deleted
Assume class-specific operator new forwards requests of the "wrong" size to ::operator new


class Base
{
public:
	static void* operator new(std::size_t size) throw(std::bad_alloc);
	static void operator delete(void* rawMemory, std::size_t size) throw();
};


Base::operator delete(void* rawMemory, std::size_t size) throw()
{
	if (0 == rawMemory)
	{
		return;
	}

	if (size != sizeof(Base))
	{
		::operator delete(rawMemory);
		return;
	}

	// deallocate the memory pointed to by rawMemory;
	return;
}


Interesting: size_t value C++ passes operator delete may be incorrect if object being deleted was
derived from base class lacking a virtual destructor - enough reason to ensure you have virtual destructor (Item7)

Simply not that if you omit virtual destructor in base class then operator delete functions may not work correctly


REMEMBER
* operator new should contain an infinite loop trying to allocate memory, should call the new-handler if it can't
  satisfy a memory request, and should handle requests for zero bytes.   
  Class-specific versions should handle requests for larger blocks than expected


* operator delete should do nothing if passed a pointer that is null
  Class-specific versions should handle blocks that are larger than expected