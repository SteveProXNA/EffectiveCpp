50 Item50
27-Mar-2014


Item 50: Understand when it makes sense to replace new and delete


Three common reasons to replace compiler-provided versions of new and delete

1. To detect usage errors
Using more than one delete on new'd memory yields undefined behavior
If operator new keeps a list of allocated addresses and delete removes from the list then it's easy to detect usage errors


2. To improve efficiency
operator new and delete that ship with compilers worry about large blocks of memory allocation, small + heap fragmentation
If you have good understanding of usage patterns then you can find custom versions of operator new and delete outperform


3. To collect usage statistics
Custom versions of operator new and delete make it easy to collect information such as:
What is the distribution of allocated block sizes?  Their lifetimes?
Are they allocated and deallocated in FIFO or LIFO?  Do patterns change over time?


EXAMPLE
First pass at global operator new that facilitates the detection of overruns and underruns


static const int signature = 0xDEADBEEF;
typedef unsigned char Byte;


// this code has several flaws—see below
void* operator new(std::size_t size) throw(std::bad_alloc)
{
  using namespace std;

  size_t realSize = size + 2 * sizeof(int);    // increase size of request so2
                                               // signatures will also fit inside

  void *pMem = malloc(realSize);               // call malloc to get the actual
  if (!pMem) throw bad_alloc();                // memory

  // write signature into first and last parts of the memory
  *(static_cast<int*>(pMem)) = signature;
  *(reinterpret_cast<int*>(static_cast<Byte*>(pMem)+realSize-sizeof(int))) = signature;


  // return a pointer to the memory just past the first signature
  return static_cast<Byte*>(pMem) + sizeof(int);
}


operator new should contain a loop calling a new-handling function but this one doesn't



ALIGNMENT
Many computer architectures require that data of particular types be placed in memory at particulate kinds of addresses

e.g.
an architecture might require pointers occur at addresses that are multiple of four (four-byte aligned)


Failure to follow such constraints could lead to hardware exceptions at runtime
Other architectures are more forgiving though they may offer better performance if alignment preferences are satisfied

e.g.
doubles may be aligned on any byte boundary on Intel x86 architecture but access to them is faster when eight-byte aligned


Alignment is relevant here: C++ requires operator new return pointers suitably aligned for any data type
malloc labors under the same requirement so having operator new return a pointer from malloc is safe

However code above returns pointer from operator new from malloc offset by the size of an int - that may cause crash!


SUMMARY
Quick glance through compiler documentation may see switches that enable debugging and logging functionality
in their memory management functions so you don't have to write operator new and delete

Another option is open source memory managers - available on many platforms
Open source allocates Pool library from Boost (Item55) tuned for allocation of large number of small objects

Real libraries have support for high performance, small object allocators that are portable, aligned and thread safe
If you write your own new and delete, look at open source versions to see insights from almost working to really working


SUMMARIZE
Knowing when to replace default versions of new and delete, either globally or on a per-class basis:

* To detect usage errors

* To collect statistics about the use of dynamically allocated memory

* To increase speed of allocation and deallocation
  General purpose allocators are often slower than custom versions
  Profile the program to confirm these functions are bottleneck worthy of custom new / delete re-write

* To compensate for suboptimal alignment in the default allocator
  Fastest access on x86 architecture when doubles are eight byte aligned
  operator new on some compilers don't guarantee eight-byte alignment for dynamic allocation of doubles
  Replacing default operator new with one that guarantees eight-byte alignment could yield big performance increase

* To cluster related objects near one another
  Minimize page faults when working on data structures that are generally used together
  Create separate heap so they are clustered together on as few pages as possible

* To obtain unconventional behavior
  Sometimes you want operator new and delete to do something compiler-provided versions don't offer
  e.g. allocate and deallocate blocks in shared memory but only have C API to manage that memory
  Another example: you write custom delete that overwrites deallocated memory with zeros to increase security of application


REMEBER
* There are many valid reasons for writing custom versions of new and delete
  including improving performance, debugging heap usage errors and collecting heap usage information