#pragma once

class NewHandlerHolder
{
public:
	explicit NewHandlerHolder(std::new_handler nh) : handler(nh)
	{
	}
	~NewHandlerHolder()
	{
		std::set_new_handler(handler);
	}

private:
	std::new_handler handler;

	// Prevent copying
	NewHandlerHolder(const NewHandlerHolder&);
	NewHandlerHolder& operator=(const NewHandlerHolder&);
};


#pragma once

#include <new>
#include "NewHandlerHolder1.h"

class Widget
{
public:
	static std::new_handler set_new_handler(std::new_handler p) throw();
	static void* operator new(std::size_t size) throw(std::bad_alloc);

private:
	static std::new_handler currentHandler;
};

std::new_handler Widget::currentHandler = 0;


std::new_handler Widget::set_new_handler(std::new_handler p) throw()
{
	std::new_handler oldHandler = currentHandler;
	currentHandler = p;

	return oldHandler;
}


void* Widget::operator new(std::size_t size) throw(std::bad_alloc)
{
	//std::new_handler handler = std::set_new_handler(currentHandler);
	//NewHandlerHolder h(handler);

	NewHandlerHolder h(std::set_new_handler(currentHandler));
	return ::operator new(size);
}


#pragma once

#include <string>
#include "Widget1.h"

void outOfMem()
{
}

int main()
{
	Widget::set_new_handler(outOfMem);

	Widget* pw1 = new Widget;
	std::string* ps = new std::string;

	Widget::set_new_handler(0);
	Widget* pw2 = new Widget;

	delete pw2;
	delete pw1;
	delete ps;

	return 0;
}